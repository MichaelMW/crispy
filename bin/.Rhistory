df = read.table(inFile)
head(df)
colnames(df) <- c("meth0","methDiff")
bins = seq(0,100, by=1)
df$binIdx = findInterval(df$meth0, bins)
dfa <- aggregate(. ~ binIdx, data = df, FUN=mean, na.rm=TRUE)
library(ggplot2)
ggplot(dfa, aes(x=binIdx, y=methDiff)) +
geom_point()+
geom_hline(yintercept =0,linetype="dashed") +
theme_classic() +
xlab("methylation without SNP (%)") +
ylab("methylation change with SNP (%)")
a =  c("cis1", "cis2", "cis3", "cis4", "cis5")
length(a)
strsplit(s)
s =  "cis1, cis2, cis3"
strsplit(s)
s =  "cis1, cis2, cis3"
strsplit(s, ",")
s =  "cis1, cis2, cis3"
a = strsplit(s, ",")
length(a)
a
a[0]
a[1]
length(a[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
inFile = "cis_loose.rankBin.bed"
dat = read.table(inFile)
loci = paste(dat[,1], dat[,2], dat[,3], sep="_")
loci
signalLists = dat[,4] ## -log(pval) * sign(log(fg/bg))  ## so the higher is stronger enrichment in fg.
head(dat)
dat[,4]
inFile = "cis_loose.rankBin.bed"
dat = read.table(inFile)
dat[,4]
loci
inFile = "cis_loose.rankBin.bed"
dat = read.table(inFile)
signal = dat[,4]
signal
signalLists = dat[,4] ## -log(pval) * sign(log(fg/bg))  ## so the higher is stronger enrichment in fg.
signalLists = lapply(strsplit(as.character(signalLists), ","), unlist)
df <- plyr::ldply(signalLists, rbind)
mat <- as.matrix(df, nrow = 10)
mat2 <- apply(mat, 2, as.numeric)
rownames(mat2) = loci
results <- aggregateRanks(rmat = mat2, method = "RRA")
library(RobustRankAggreg)
results <- aggregateRanks(rmat = mat2, method = "RRA")
results
tail(results)
mat2
?aggregateRanks
glist <- list(sample(letters[4:24]), sample(letters[2:22]), sample(letters[1:20]))
r = rankMatrix(glist, full = TRUE)
head(r)
aggregateRanks(rmat = r, method = "RRA")
glist
r
sample(letters[4:24])
list(c(1,1,2),c(12,1))
glist = list(c(1,1,2),c(12,1))
r = rankMatrix(glist, full = TRUE)
glist
glist <- list(sample(letters[4:24]), sample(letters[2:22]), sample(letters[1:20]))
glist
glist = list(c(1,1,2),c(12,1))
list(c(1,1,2),c(12,1))
?aggregateRanks
inFile = "demos/d1.Yarui/data.tsv"
dat = read.table(inFile, header = T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
inFile = "demos/d1.Yarui/data.tsv"
dat = read.table(inFile, header = T)
inFile = "../demos/d1.Yarui/data.tsv"
dat = read.table(inFile, header = T)
fgs=list("cis1", "cis2", "cis3", "cis4", "cis5")
bgs=list("ctr1", "ctr2")
reads = dat[,c(unlist(fgs), unlist(bgs))]
head(reads)
dat = read.table(inFile, header = T)
reads = dat[,c(unlist(fgs), unlist(bgs))]
status = as.factor(dat[,dim(dat)[2]])
ncol = dim(reads)[2]
group = c(rep("fg", length(unlist(fgs))), rep("bg", length(unlist(bgs))))
design = model.matrix(~group)
dlist = DGEList(as.matrix(reads))
library(edgeR)
dat = read.table(inFile, header = T)
reads = dat[,c(unlist(fgs), unlist(bgs))]
status = as.factor(dat[,dim(dat)[2]])
ncol = dim(reads)[2]
group = c(rep("fg", length(unlist(fgs))), rep("bg", length(unlist(bgs))))
design = model.matrix(~group)
dlist = DGEList(as.matrix(reads))
head(dat)
head(reads)
reads.fgs = dat[,unlist(fgs)]
reads.fgs
reads.fgs = dat[,unlist(bgs)]
reads.fgs = dat[,unlist(fgs)]
reads.bgs = dat[,unlist(bgs)]
reads2 = cbind(reads.fgs,reads.bgs)
head(reads)
head(reads2)
reads1==reads2
reads==reads2
summary(reads==reads2)
library(preprocessCore)
qnorm <- function(df){
df.qnorm = as.matrix(normalize.quantiles(df))
rownames(df.qnorm) = rownames(df)
colnames(df.qnorm) = colnames(df)
return(df.qnorm)
}
qnorm(reads.fgs)
qnorm(as.matrix(reads.fgs))
qnorm <- function(df){
mat = as.matrix(df)
df.qnorm = normalize.quantiles(mat)
rownames(df.qnorm) = rownames(df)
colnames(df.qnorm) = colnames(df)
return(df.qnorm)
}
outMat = qnorm(reads.fgs)
outMat
head(outMat)
reads.fgs.q = qnorm(reads.fgs)
length(c(unlist(fgs), unlist(bgs)))
c(unlist(fgs), unlist(bgs))
dlist
group
dlist
reads.fgs
qnormFun(reads.fgs)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
inFile = "../demos/d1.Yarui/data.tsv"
fgs=list("cis1", "cis2", "cis3", "cis4", "cis5")
bgs=list("ctr1", "ctr2")
library(edgeR)
dat = read.table(inFile, header = T)
status = as.factor(dat[,dim(dat)[2]])
ncol = length(c(unlist(fgs), unlist(bgs)))
group = c(rep("fg", length(unlist(fgs))), rep("bg", length(unlist(bgs))))
design = model.matrix(~group)
reads.fgs = dat[,unlist(fgs)]
reads.bgs = dat[,unlist(bgs)]
# quantile normalization of reads
library(preprocessCore)
qnormFun <- function(df){
mat = as.matrix(df)
df.qnorm = normalize.quantiles(mat)
rownames(df.qnorm) = rownames(df)
colnames(df.qnorm) = colnames(df)
return(df.qnorm)
}
reads.fgs
if(qnorm=="1"){
if(length(unlist(fgs))>1){
reads.fgs = qnormFun(reads.fgs)
}
if(length(unlist(bgs))>1){
reads.bgs = qnormFun(reads.bgs)
}
}
if(length(unlist(fgs))>1){
reads.fgs = qnormFun(reads.fgs)
}
if(length(unlist(bgs))>1){
reads.bgs = qnormFun(reads.bgs)
}
reads
cbind(reads.fgs,reads.bgs)
reads
cbind(reads.fgs,reads.bgs)
reads.q =cbind(reads.fgs,reads.bgs)
reads
reads.q
reads
dlist = DGEList(as.matrix(reads))
if(hasRep==1){
d = estimateDisp(calcNormFactors(dlist), design)
fit = glmQLFit(d, design, robust=TRUE)
results = glmQLFTest(fit)
}else{
d = estimateGLMCommonDisp(dlist, method="deviance", robust=TRUE, subset=NULL)
fit <- glmFit(d, design)
results <- glmLRT(fit)
}
d = estimateDisp(calcNormFactors(dlist), design)
fit = glmQLFit(d, design, robust=TRUE)
results = glmQLFTest(fit)
results
dlist.q = DGEList(as.matrix(reads.q))
d = estimateDisp(calcNormFactors(dlist.q), design)
fit = glmQLFit(d, design, robust=TRUE)
results.q = glmQLFTest(fit)
results
results.q
tab = cbind(results$table, status)
rownames(tab) = dat[,1]
ggplot(tab, aes(x=logCPM,y=logFC)) +
geom_point(aes(colour = status), size = 1)
p1 <- ggplot(tab, aes(x=logCPM,y=logFC)) +
geom_point(aes(colour = status), size = 1)
tab.q = cbind(results.q$table, status)
rownames(tab.q) = dat[,1]
p1.q <- ggplot(tab.q, aes(x=logCPM,y=logFC)) +
geom_point(aes(colour = status), size = 1)
p1.q
p1
grid.arrange(p1, p1.q, nrow = 2)
library(gridExtra)
grid.arrange(p1, p1.q, nrow = 2)
head(dat)
dim(dat)[2]
X <- as.matrix(dat[,2:dim(dat)[2]]-1)
2:dim(dat)[2]]-1
X <- as.matrix(dat[,2:dim(dat)[2]-1])
autoplot(prcomp(X), data=dat, colour='T1', size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
head(X)
head(dat)
2:dim(dat)[2]-1
X <- as.matrix(dat[,2:(dim(dat)[2]-1)])
autoplot(prcomp(X), data=dat, colour='T1', size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
prcomp(X)
library(ggfortify)
autoplot(prcomp(X), data=dat, colour='T1', size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
library(ggfortify)
autoplot(prcomp(X), data=dat, size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
autoplot(t(prcomp(X)), data=dat, size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
X <- t(X)
#plot(X.pca)
library(ggfortify)
autoplot(prcomp(X), data=dat, size=1,
loadings = TRUE,
loadings.colour = 'blue',
loadings.label = TRUE)
autoplot(prcomp(X), data=X, size=1)
X
head(X)
colnames(X)
rownames(X)
autoplot(prcomp(X), data=X, size=1,
loadings = F,
loadings.colour = 'blue',
loadings.label = T)
X <- dat[,2:(dim(dat)[2]-1)]
X <- t(X)
rownames(X)
X <- dat[,2:(dim(dat)[2]-1)]
#X <- t(X)
#rownames(X)
autoplot(prcomp(X), data=dat, size=1, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T)
autoplot(prcomp(X), data=dat, size=0.5, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T)
autoplot(prcomp(X), data=dat, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
autoplot(prcomp(t(X))) + theme_classic()
autoplot(prcomp(X), data=dat, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
autoplot(prcomp(t(X))) + theme_classic()
tX <- t(X)
rownames(tX)
autoplot(tX, data = tX) + theme_classic()
tX <- t(X)
autoplot(tX, data = t(dat)) + theme_classic()
tDat <- t(dat)
tDat
colnames(tDat)
rownames(tDat)
colnames(tDat) <- tDat[,1]
colnames(tDat) <- tDat[1,]
rownames(tDat)
colnames(tDat)
autoplot(prcomp(tX), data = tDat) + theme_classic()
tX
autoplot(prcomp(tX), data = tDat) + theme_classic()
rownames(tDat)
dim(tDat)[2]-1
tDat <- t(dat)
rownames(tDat)
#colnames(tDat) <- tDat[1,]
tX <- tDat[2:(dim(tDat)[1]-1),]
autoplot(prcomp(tX), data = tDat) + theme_classic()
tX
head(tX)
tX[1:10,1:10]
tX[1:10,1:12]
tX[1:10,1:13]
tX[1:13,1:13]
tX[1:12,1:13]
tX[1:11,1:13]
tX[1:10,1:13]
tX <- as.numeric(tDat[2:(dim(tDat)[1]-1),])
tX[1:10,1:13]
tX[1:10,1:10]
tX[1:5,1:10]
head(tX)
tX <- as.matrix(tDat[2:(dim(tDat)[1]-1),])
tX[1:5,1:10]
tX <- as.numeric(as.matrix(tDat[2:(dim(tDat)[1]-1),]))
rownames(tDat)
X
tX[1:5,1:10]
tX <- as.matrix(tDat[2:(dim(tDat)[1]-1),])
tX[1:5,1:10]
tX <- data.matrix(tDat[2:(dim(tDat)[1]-1),])
tX[1:5,1:10]
tX <- as.data.matrix(tDat[2:(dim(tDat)[1]-1),])
tX <- data.matrix(tDat[2:(dim(tDat)[1]-1),])
tX[1:5,1:10]
tDat <- as.data.frame(t(dat))
rownames(tDat)
tX <- tDat[2:(dim(tDat)[1]-1),]
tX[1:5,1:10]
autoplot(prcomp(tX), data = tDat) + theme_classic()
tX[1:5,1:10]
tX[1:10,1:10]
tX
tX[1:10,1:10]
autoplot(prcomp(tX[1:10,1:10]), data = tDat) + theme_classic()
autoplot(prcomp(tX[1:10,1:10])) + theme_classic()
colMeans(tX)
tX[1:10,1:10]
colMeans(tX[1:10,1:10])
tX <- data.matrix(tDat[2:(dim(tDat)[1]-1),])
tX[1:10,1:10]
colMeans(tX[1:10,1:10])
autoplot(prcomp(tX[1:10,1:10])) + theme_classic()
autoplot(prcomp(tX), data = tDat) + theme_classic()
autoplot(prcomp(X), data=dat, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
autoplot(prcomp(tX), data = tDat) + theme_classic()
autoplot(prcomp(tX)) + theme_classic()
autoplot(prcomp(tX), label = TRUE) + theme_classic()
autoplot(prcomp(tX), label = TRUE, shape = FALSE) + theme_classic()
ppca1 <- autoplot(prcomp(X), data=dat, colour = "Group",
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
ppca2 <- autoplot(prcomp(tX), label = TRUE, shape = FALSE) + theme_classic()
grid.arrange(ppca1, ppca2, nrow = 2)
pdf(outPdf, width = 7, height = 10)
grid.arrange(ppca1, ppca2, nrow = 2)
dev.off()
rownames(tab) = dat[,1]
rownames(tab)
head(X)
colnames(dat)
colnames(dat)[dim(dat)[2]]
tX <- tDat[2:(dim(tDat)[1]-1),]
ppca2 <- autoplot(prcomp(tX), label = TRUE, shape = FALSE) + theme_classic()
tDat[1:5,1:5]
dat[1:5,1:5]
dat[1:5,2:5]
c(2:(dim(dat)[2]-1))
library(ggfortify)
nSamp = c(2:(dim(dat)[2]-1))
X <- dat[,nSamp]
#pca1
cat("Running PCA1 on sgRNAs ...\n")
ppca1 <- autoplot(prcomp(X), data=dat, colour = colnames(dat)[dim(dat)[2]],
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
cat("Running PCA on experiments ...\n")
tDat <- as.data.frame(t(dat[,nSamp]))
tDat[1:5,1:5]
dat[1:5,2:5]
tDat[1:5,1:5]
ppca2 <- autoplot(prcomp(tDat), label = TRUE, shape = FALSE) + theme_classic()
library(ggfortify)
nSamp = c(2:(dim(dat)[2]-1))
X <- dat[,nSamp]
#pca1
cat("Running PCA1 on sgRNAs ...\n")
ppca1 <- autoplot(prcomp(X), data=dat, colour = colnames(dat)[dim(dat)[2]],
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
#pca2
cat("Running PCA on experiments ...\n")
tX <- as.data.frame(t(dat[,nSamp]))
ppca2 <- autoplot(prcomp(tX), label = TRUE, shape = FALSE) + theme_classic()
grid.arrange(ppca1, ppca2, nrow = 2)
?prcomp
head(reads)
p1
grid.arrange(p1, p2, ppca1, ppca2, nrow = 2)
grid.arrange(p1, p1, ppca1, ppca2, nrow = 2)
ggplot(tab, aes(x=logCPM,y=logFC)) +
geom_point(aes(colour = status), size = 1) + theme_classic()
head(X)
head(reads)
nSamp
colnames(dat)
match(rownames(dat),rownames(reads))
match(colnames(dat),colnames(reads))
idxReplace = match(colnames(dat),colnames(reads))
dat[,idxReplace]
idxReplace
dat[,idxReplace]
?merge
head(dat)
head(reads)
if(length(unlist(fgs))>1){
reads.fgs = qnormFun(reads.fgs)
cat("using quantile normalization on foreground ...\n")
}
if(length(unlist(bgs))>1){
reads.bgs = qnormFun(reads.bgs)
cat("using quantile normalization on background ...\n")
}
reads = cbind(reads.fgs,reads.bgs)
head(dat)
head(reads)
head(reads)
head(dat)
dim(dat)
dim(reads)
testmerge <- merge(dat, reads)
dim(testmerge)
testmerge
testmerge <- merge(dat, reads, all.x=T)
dim(testmerge)
head(testmerge)
match(colnames(dat),colnames(reads))
match(colnames(reads),colnames(dat))
colnames(dat)
colnames(reads)
head(reads)
head(dat)
idxReplace = match(colnames(reads),colnames(dat))
head(dat)
head(reads)
dim(dat)
dim(reads)
head(reads[,idxReplace])
head(dat)
head(reads)
dat[,idxReplace] <- reads
head(dat)
pcaX <- prcomp(X)
set.seed(0)
pcaX <- prcomp(X)
set.seed(1)
pcaX1 <- prcomp(X)
pcaX == pcaX1
identical(pcaX, pcaX1)
ppca1
ppca2
outDir
outPng = "test.png"
cat(paste0("plot QC file = ", outPng,"\n"))
png(outPng, width = 12, height = 10, unit="in")
grid.arrange(ppca1, ppca2, p1, p2, nrow = 2)
dev.off()
p1
p1 <- ggplot(tab, aes(x=logCPM,y=logFC)) +
geom_point(aes(colour = status), size = 1) + theme_classic()
p2 <- ggplot(tab, aes(x=logFC,y=PValue)) +
geom_point(aes(colour = status), size = 1) + theme_classic()
p2
grid.arrange(ppca1, ppca2, p1, p2, nrow = 2)
png(outPng, width = 12, height = 10, unit="in")
grid.arrange(ppca1, ppca2, p1, p2, nrow = 2)
dev.off()
png(outPng, width = 900, height = 700)
grid.arrange(ppca1, ppca2, p1, p2, nrow = 2)
dev.off()
png(outPng, width = 900, height = 700)
grid.arrange(ppca1, ppca2, p1, p2, nrow = 2)
dev.off()
outPng
ppca1 <- autoplot(prcomp(X), label = TRUE, colour = colnames(dat)[dim(dat)[2]],
loadings = T,
loadings.colour = 'blue',
loadings.label = T) + theme_classic()
ppca1
colnames(dat)[dim(dat)[2]
]
dat$Group
